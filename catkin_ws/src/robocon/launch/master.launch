<launch>
    <arg name="veh" default="Robo" doc="Name of vehicle. ex: megaman"/>
    <arg name="local" default="false" doc="true for running on laptop. false for running on vehicle."/>
    <arg name="config" default="baseline" doc="Specify a config."/>
    <arg name="param_file_name" default="default"/>

    <!-- switch args-->
    <arg name="camera" default="false"/>
    <arg name="detect" default="false"/>
    <arg name="fsm" default="true"/>
    <arg name="joystick" default="true"/>
    <arg name="encoder" default="true"/>
    <arg name="decoder" default="true"/>
    <arg name="ccd" default="false"/>
    <arg name="ccd/ccd_detector" default="false"/>
    <arg name="odo" default="false"/>
    <arg name="viz_odom" default="false"/>

    <arg name="planner" default="true"/>

    <!-- Start Camera-->
    <group if="$(arg camera)">
        <include file="$(find usb_cam)/launch/usb_cam-test.launch">
            
        </include>
    </group>

    <!-- Start finite state machine -->
    <group if="$(arg fsm)">    
        <node ns="$(arg veh)" pkg="fsm" type="fsm_node.py" name="fsm_node" clear_params="true" output="screen" required="true">
            <rosparam command="load" file="$(find robocon)/config/$(arg config)/fsm/fsm_node/$(arg param_file_name).yaml"/>
        </node>
    </group>

    <group if="$(arg planner)"> 
        <node ns="$(arg veh)" name="task_planner_node" pkg="task_planner" type="task_planner_node.py" output="screen">
            <remap from="/Robo/task_planner_node/confirm_path" to="/Robo/path_planner_node/confirm"/>
            <remap from="/Robo/task_planner_node/confirm_move" to="/Robo/move_planner_node/confirm"/>
            <remap from="/Robo/task_planner_node/finish_move" to="/Robo/move_planner_node/finish"/>
            <remap from="/Robo/task_planner_node/finish_path" to="/Robo/path_planner_node/reach_dest"/>
        </node>

        <node ns="$(arg veh)" pkg="path_planner" type="path_planner_node.py" name="path_planner_node" output="screen">
            <remap from="/Robo/path_planner_node/reach_goal" to="/Robo/odo_control_node/reach_goal"/>
            <remap from="/Robo/path_planner_node/set_path" to="/Robo/task_planner_node/set_path"/>
        </node>

        <node ns="$(arg veh)" pkg="move_planner" type="move_planner_node.py" name="move_planner_node" output="screen">
            <remap from="/Robo/move_planner_node/set_move" to="/Robo/task_planner_node/set_move"/>
        </node>
    </group>

    <!-- Start Joystick -->
    <group if="$(arg joystick)">
        <node ns="$(arg veh)" pkg="joy" type="joy_node" name="joy_node" output="screen"/>
        <node ns="$(arg veh)" pkg="joy_mapper" type="joy_mapper_node.py" name="joy_mapper_node" output="screen">
            <remap from="/Robo/joy_mapper_node/joy" to="/Robo/joy"/>
        </node>
    </group>

    <!-- Start Serial Port Encoder -->
    <group if="$(arg encoder)">
        <node ns="$(arg veh)" pkg="serial_encoder" type="serial_encoder_node.py" name="serial_encoder_node" output="screen">
            <rosparam command="load" file="$(find robocon)/config/$(arg config)/serial_encoder/serial_encoder_node/$(arg param_file_name).yaml"/>
            <remap from="/Robo/serial_encoder_node/joy_data" to="/Robo/joy_mapper_node/joy_data"/>
            <remap from="/Robo/serial_encoder_node/odo_data" to="/Robo/odo_control_node/twist2d"/>
            <remap from="/Robo/serial_encoder_node/pid_data" to="/Robo/pid_control_node/twist2d"/>
        </node>
    </group>

    <!-- Start Serial Port Decoder -->
    <group if="$(arg decoder)">
        <node ns="$(arg veh)" pkg="serial_decoder" type="serial_decoder_node.py" name="serial_decoder_node" output="screen">
            <rosparam command="load" file="$(find robocon)/config/$(arg config)/serial_decoder/serial_decoder_node/$(arg param_file_name).yaml"/>
        </node>
    </group>

    <!-- Start CCD control -->
    <group if="$(arg ccd)">
        <group if="$(arg ccd/ccd_detector)">
            <node name="ccd_detector" pkg="ccd_detector" type="ccd_detector_node.py" output="screen">
            <remap from="~image_raw" to="/duckiebot/camera1/image_raw"/>
            </node> 
        </group> 

        <node ns="$(arg veh)" pkg="ccd_filter" type="ccd_filter_node.py" name="ccd_filter_node" output="screen">
            <rosparam command="load" file="$(find robocon)/config/$(arg config)/CCD/ccd_filter_node/$(arg param_file_name).yaml"/>
            <remap from="/Robo/ccd_filter_node/ccd_msg" to="/Robo/serial_decoder_node/ccd_msg"/>
        </node>

        <node ns="$(arg veh)" pkg="ccd_control" type="ccd_control_node.py" name="ccd_control_node" output="screen">
            <rosparam command="load" file="$(find robocon)/config/$(arg config)/CCD/ccd_control_node/$(arg param_file_name).yaml"/>
        </node>
    </group>

    <!-- Start Odometry control -->
    <group if="$(arg odo)">
        <!-->
        <node ns="$(arg veh)" pkg="path_planner" type="path_planner_node.py" name="path_planner_node" output="screen">
            <remap from="/Robo/path_planner_node/reach_goal" to="/Robo/odo_control_node/reach_goal"/>
        </node>
        <node ns="$(arg veh)" pkg="move_planner" type="move_planner_node.py" name="move_planner_node" output="screen">
        </node>
        -->
        <node ns="$(arg veh)" pkg="odo_control" type="odo_control_node.py" name="odo_control_node" output="screen">
            <remap from="/Robo/odo_control_node/pose" to="/Robo/serial_decoder_node/odo_msg"/>
            <remap from="/Robo/odo_control_node/goal" to="/Robo/path_planner_node/goal"/>
        </node>
        <node ns="$(arg veh)" pkg="pid_control" type="pid_control_node.py" name="pid_control_node" output="screen">
            <remap from="/Robo/pid_control_node/cur_pos_update" to="/Robo/serial_decoder_node/odo_msg"/>
            <remap from="/Robo/pid_control_node/ref_pos_update" to="/Robo/path_planner_node/goal"/>
        </node>
        <!--<node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" />-->
    </group>

    <!-- Start Object Detector-->
    <group if="$(arg detect)">
        <node ns="$(arg veh)" pkg="detector" type="detector_node.py" name="detector_node" output="screen"/>
        <!-- Publications -->

        <!-- Subscriptions -->
    </group>

    <!-- Start Visual Odometry -->
    <group if="$(arg viz_odom)">
        <node ns="$(arg veh)" pkg="visual_odometry" type="visual_odometry_node.py" name="visual_odometry_node" output="screen"/>
    </group>
</launch>
